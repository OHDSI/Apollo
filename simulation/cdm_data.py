"""
This module contains the CdmData class, which is used to store the data that is generated by the simulation. The
data is stored in dynamic arrays, which are then concatenated into a single numpy array when the simulation is
complete. The data is then written to parquet files.
"""
import os
from typing import Type
import logging

import numpy as np
import pyarrow as pa
import pyarrow.parquet as pq


class DynamicArray:
    """
    A dynamic array that can be appended to one at a time. The array is split into blocks of a fixed size, and the
    blocks are concatenated when the array is collected.
    """

    BLOCK_SIZE = 1000

    def __init__(self, dtype: Type = np.float64):
        self._dtype = dtype
        self._blocks = []
        self._current_block = self._create_block()
        self._cursor = -1

    def _create_block(self):
        if self._dtype == np.datetime64:
            return np.full(shape=self.BLOCK_SIZE, fill_value=np.datetime64("2010-01-01"))
        else:
            return np.zeros(self.BLOCK_SIZE, dtype=self._dtype)

    def append(self, value):
        self._cursor += 1
        if self._cursor >= self.BLOCK_SIZE:
            self._blocks.append(self._current_block)
            self._current_block = self._create_block()
            self._cursor = 0
        self._current_block[self._cursor] = value

    def __len__(self):
        return len(self._blocks) * self.BLOCK_SIZE + self._cursor + 1

    def collect(self) -> np.ndarray:
        return np.concatenate(self._blocks + [self._current_block[:self._cursor + 1]])


def _create_folder_if_not_exists(folder: str):
    if not os.path.exists(folder):
        os.makedirs(folder)


class CdmData:
    """
    The data that is generated by the simulation.
    """

    def __init__(self):
        self._person_person_id = DynamicArray(np.int64)
        self._person_year_of_birth = DynamicArray(np.int32)
        self._person_month_of_birth = DynamicArray(np.int32)
        self._person_day_of_birth = DynamicArray(np.int32)
        self._person_gender_concept_id = DynamicArray(np.int64)
        self._visit_occurrence_person_id = DynamicArray(np.int64)
        self._visit_occurrence_visit_occurrence_id = DynamicArray(np.int64)
        self._visit_occurrence_visit_start_date = DynamicArray(np.datetime64)
        self._visit_occurrence_visit_end_date = DynamicArray(np.datetime64)
        self._visit_occurrence_visit_concept_id = DynamicArray(np.int64)
        self._condition_occurrence_person_id = DynamicArray(np.int64)
        self._condition_occurrence_visit_occurrence_id = DynamicArray(np.int64)
        self._condition_occurrence_condition_start_date = DynamicArray(np.datetime64)
        self._condition_occurrence_condition_concept_id = DynamicArray(np.int64)
        self._observation_period_person_id = DynamicArray(np.int64)
        self._observation_period_observation_period_id = DynamicArray(np.int64)
        self._observation_period_observation_period_start_date = DynamicArray(np.datetime64)
        self._observation_period_observation_period_end_date = DynamicArray(np.datetime64)

    def add_person(self, person_id: int, year_of_birth: int, month_of_birth: int, day_of_birth: int,
                   gender_concept_id: int):
        self._person_person_id.append(person_id)
        self._person_year_of_birth.append(year_of_birth)
        self._person_month_of_birth.append(month_of_birth)
        self._person_day_of_birth.append(day_of_birth)
        self._person_gender_concept_id.append(gender_concept_id)

    def add_visit_occurrence(self, person_id: int, visit_occurrence_id: int, visit_start_date: np.datetime64,
                             visit_end_date: np.datetime64, visit_concept_id: int):
        self._visit_occurrence_person_id.append(person_id)
        self._visit_occurrence_visit_occurrence_id.append(visit_occurrence_id)
        self._visit_occurrence_visit_start_date.append(visit_start_date)
        self._visit_occurrence_visit_end_date.append(visit_end_date)
        self._visit_occurrence_visit_concept_id.append(visit_concept_id)

    def add_condition_occurrence(self, person_id: int, visit_occurrence_id: int, condition_start_date: np.datetime64,
                                 condition_concept_id: int):
        self._condition_occurrence_person_id.append(person_id)
        self._condition_occurrence_visit_occurrence_id.append(visit_occurrence_id)
        self._condition_occurrence_condition_start_date.append(condition_start_date)
        self._condition_occurrence_condition_concept_id.append(condition_concept_id)

    def add_observation_period(self, person_id: int, observation_period_id: int,
                               observation_period_start_date: np.datetime64,
                               observation_period_end_date: np.datetime64):
        self._observation_period_person_id.append(person_id)
        self._observation_period_observation_period_id.append(observation_period_id)
        self._observation_period_observation_period_start_date.append(observation_period_start_date)
        self._observation_period_observation_period_end_date.append(observation_period_end_date)

    def write_to_parquet(self, root_folder: str, partition_i: int):
        person = pa.Table.from_arrays(arrays=[
            self._person_person_id.collect(),
            self._person_year_of_birth.collect(),
            self._person_month_of_birth.collect(),
            self._person_day_of_birth.collect(),
            self._person_gender_concept_id.collect()],
            names=["person_id", "year_of_birth", "month_of_birth", "day_of_birth", "gender_concept_id"])
        visit_occurrence = pa.Table.from_arrays(arrays=[
            self._visit_occurrence_person_id.collect(),
            self._visit_occurrence_visit_occurrence_id.collect(),
            self._visit_occurrence_visit_start_date.collect(),
            self._visit_occurrence_visit_end_date.collect(),
            self._visit_occurrence_visit_concept_id.collect()],
            names=["person_id", "visit_occurrence_id", "visit_start_date", "visit_end_date", "visit_concept_id"])
        condition_occurrence = pa.Table.from_arrays(arrays=[
            self._condition_occurrence_person_id.collect(),
            self._condition_occurrence_visit_occurrence_id.collect(),
            self._condition_occurrence_condition_start_date.collect(),
            self._condition_occurrence_condition_concept_id.collect()],
            names=["person_id", "visit_occurrence_id", "condition_start_date", "condition_concept_id"])
        observation_period = pa.Table.from_arrays(arrays=[
            self._observation_period_person_id.collect(),
            self._observation_period_observation_period_id.collect(),
            self._observation_period_observation_period_start_date.collect(),
            self._observation_period_observation_period_end_date.collect()],
            names=["person_id", "observation_period_id", "observation_period_start_date",
                   "observation_period_end_date"])
        file_name = "part{:04d}.parquet".format(partition_i + 1)
        _create_folder_if_not_exists(os.path.join(root_folder, "person"))
        pq.write_table(person, os.path.join(root_folder, "person", file_name))
        _create_folder_if_not_exists(os.path.join(root_folder, "visit_occurrence"))
        pq.write_table(visit_occurrence, os.path.join(root_folder, "visit_occurrence", file_name))
        _create_folder_if_not_exists(os.path.join(root_folder, "condition_occurrence"))
        pq.write_table(condition_occurrence, os.path.join(root_folder, "condition_occurrence", file_name))
        _create_folder_if_not_exists(os.path.join(root_folder, "observation_period"))
        pq.write_table(observation_period, os.path.join(root_folder, "observation_period", file_name))

    def log_statistics(self, partition_i: int):
        logging.debug("Partition %s persons: %s", partition_i, len(self._person_person_id))
        logging.debug("Partition %s visit_occurrences: %s", partition_i, len(self._visit_occurrence_person_id))
        logging.debug("Partition %s mean concepts per visit: %.1f", partition_i,
                      len(self._condition_occurrence_person_id) / len(self._visit_occurrence_person_id))
        total_time = np.sum(np.subtract(self._observation_period_observation_period_end_date.collect(),
                            self._observation_period_observation_period_start_date.collect()).view(np.int64))
        logging.debug("Partition %s mean days between visits: %.1f", partition_i,
                      total_time / len(self._visit_occurrence_person_id))
